version: '3.8'

services:
  db:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: candelaria
      MYSQL_DATABASE: dcs
      MYSQL_USER: candelaria
      MYSQL_PASSWORD: candelaria
    ports:
      - "3306:3306"
    volumes:
      - ./database:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: candelaria
    ports:
      - "8080:80"
    depends_on:
      - db

  # vpn-forticlient:
  #   build:
  #     context: Services/VpnForti
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production

  # dcs-candelaria_switches:
  #   build:
  #     context: Services/Switches
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production
        
  # dcs-candelaria_clients:
  #   build:
  #     context: Services/Clientes
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production
      
  # ups:
  #   build:
  #     context: Services/Ups
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production
      
  # mesh:
  #   build:
  #     context: Services/Mesh
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production
      
  # camaras:
  #   build:
  #     context: Services/Camaras
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production
    
  # backend-api-rest:
  #   build:
  #     context: Backend
  #   ports:
  #     - '3001:3001'
  #   restart: always
  #   environment:
  #     - NODE_ENV=production
  # #   # command: sh -c "npx sequelize-cli db:migrate && node index.js"
      
  # frontend-react:
  #   build:
  #     context: Front
  #   ports:
  #     - '4000:80'
  #   restart: always
  # #!   environment: Este se define en el archivo .env

  # wan:
  #   build:
  #     context: Services/Wan
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production

  # firewalls:
  #   build:
  #     context: Services/Firewalls
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production

  # infraestructura-general:
  #   build:
  #     context: Services/InfraGeneral
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production

  base_fim:
    build:
      context: Services/FiM
    restart: always
    depends_on:
      - db
    environment:
      - ENVIRONMENT=production

  # anillo_candelaria:
  #   build:
  #     context: Services/Anillo
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production

  # mesh_process:
  #   build:
  #     context: Services/Mesh_Process
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production

  # groups_prtg:
  #   build:
  #     context: Services/Mesh_Process
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production

  # monitoreo_dockers:
  #   container_name: monitoreo_dockers
  #   build:
  #     context: Services/Docker_Monitoring
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
      
  # anillo_ug:
  #   build:
  #     context: Services/Anillo_Ug
  #   restart: always
  #   depends_on:
  #     - db
  #   environment:
  #     - ENVIRONMENT=production
  #     - PRTG_USERNAME=${PRTG_USERNAME}
  #     - PRTG_PASSWORD=${PRTG_PASSWORD}
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_DATABASE=${DB_DATABASE}
